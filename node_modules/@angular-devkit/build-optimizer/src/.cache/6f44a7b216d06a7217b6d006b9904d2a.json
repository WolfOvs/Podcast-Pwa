{"remainingRequest":"/Applications/MAMP2/SDG/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Applications/MAMP2/SDG/node_modules/ng-http-loader/services/spinner-visibility.service.js","dependencies":[{"path":"/Applications/MAMP2/SDG/node_modules/ng-http-loader/services/spinner-visibility.service.js","mtime":1526124074000},{"path":"/Applications/MAMP2/SDG/node_modules/cache-loader/dist/cjs.js","mtime":1526323607286},{"path":"/Applications/MAMP2/SDG/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525376550000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar rxjs_1 = require(\"rxjs\");\nvar pending_interceptor_service_1 = require(\"./pending-interceptor.service\");\nvar SpinnerVisibilityService = /*@__PURE__*/ (function () {\n    function SpinnerVisibilityService(pendingInterceptorService) {\n        this.pendingInterceptorService = pendingInterceptorService;\n        this._visibilitySubject = new rxjs_1.ReplaySubject(1);\n    }\n    Object.defineProperty(SpinnerVisibilityService.prototype, \"visibilityObservable\", {\n        get: function () {\n            return this._visibilitySubject.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SpinnerVisibilityService.prototype.show = function () {\n        this.pendingInterceptorService.forceByPass = true;\n        this._visibilitySubject.next(true);\n    };\n    SpinnerVisibilityService.prototype.hide = function () {\n        this._visibilitySubject.next(false);\n        this.pendingInterceptorService.forceByPass = false;\n    };\n    SpinnerVisibilityService.decorators = [\n        { type: core_1.Injectable },\n    ];\n    return SpinnerVisibilityService;\n}());\nexports.SpinnerVisibilityService = SpinnerVisibilityService;\nfunction SpinnerVisibilityServiceFactory(pendingInterceptorService) {\n    return new SpinnerVisibilityService(pendingInterceptorService);\n}\nexports.SpinnerVisibilityServiceFactory = SpinnerVisibilityServiceFactory;\nexports.SpinnerVisibilityServiceFactoryProvider = {\n    provide: SpinnerVisibilityService,\n    useFactory: SpinnerVisibilityServiceFactory,\n    deps: [pending_interceptor_service_1.PendingInterceptorService]\n};\n",null]}